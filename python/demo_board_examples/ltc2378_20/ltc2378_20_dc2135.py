# -*- coding: utf-8 -*-
'''
DC2135 / LTC2378-20 Interface Example

This program demonstrates how to communicate with the LTC2378-20 demo board through Python.
Examples are provided for reading data captured by the ADC, or test data generated by
the ADC.

Board setup is described in Demo Manual 2135. Follow the procedure in this manual, and
verify operation with the PScope software. Once operation is verified, exit PScope
and run this script.

Tested with Python 2.7, Anaconda distribution available from Continuum Analytics,
http://www.continuum.io/

Demo board documentation:
http://www.linear.com/demo/
http://www.linear.com/product/LTC2378-20#demoboards

LTC2378-20 product page
http://www.linear.com/product/LTC2378-20


REVISION HISTORY
$Revision: 4276 $
$Date: 2015-10-20 10:38:41 -0700 (Tue, 20 Oct 2015) $

Copyright (c) 2015, Linear Technology Corp.(LTC)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of Linear Technology Corp.
'''

from time import sleep
# Import communication library
import sys
sys.path.append("../../")
#print sys.path
from matplotlib import pyplot as plt
import numpy as np


import ltc_controller_comm as comm

# Print extra information to console
verbose = True
# Plot data to screen
plot_data = True
#Write data out to a text file
write_to_file = True

NUM_ADC_SAMPLES = 32 * 1024
NUM_DC890_SAMPLES = NUM_ADC_SAMPLES * 2
SAMPLE_BYTES = 2
EEPROM_ID_SIZE = 50

# find demo board with correct ID
device_info = None
print 'Looking for a DC890 with a DC2135 demoboard'
for info in comm.list_controllers(comm.TYPE_DC890):
    with comm.Controller(info) as device:
        eeprom_id = device.eeprom_read_string(EEPROM_ID_SIZE)
        if 'DC2135' in eeprom_id:
            if verbose:
                print 'Found a DCDC2135 demoboard'
            device_info = info
            break
if device_info is None:
    raise(comm.HardwareError('Could not find a compatible device'))
# Open communication to the demo board
with comm.Controller(device_info) as controller:

    if not controller.fpga_get_is_loaded("CMOS"):
        if verbose:
            print 'Loading FPGA'
        controller.fpga_load_file("CMOS")
    elif verbose:
        print 'FPGA already loaded'

    if verbose:
        print 'Starting data collect'

    controller.data_set_high_byte_first()

    controller.data_set_characteristics(True, SAMPLE_BYTES, True)
    controller.data_start_collect(NUM_DC890_SAMPLES, comm.TRIGGER_NONE)

    for i in range(10):
        is_done = controller.data_is_collect_done()
        if is_done:
            break
        sleep(0.2)

    if not is_done:
        raise comm.HardwareError('Data collect timed out (missing clock?)')

    if verbose:
        print 'Data collect done.'

    controller.dc890_flush()

    if verbose:
        print 'Reading data'
    num_bytes, rawdata = controller.data_receive_uint16_values(end=NUM_DC890_SAMPLES)
    if verbose:
        print 'Data read done'

# Split data into high and low 16-bit words
    data_high = [0] * (NUM_ADC_SAMPLES)
    data_low = [0] * (NUM_ADC_SAMPLES)
    
# Here is where you would flip high and low...   
    for i in range(NUM_ADC_SAMPLES):
        data_high[i] = rawdata[2*i]& 0xFFFF
        data_low[i] = rawdata[2*i + 1]& 0xFFFF
            
# assemble 32 bit wide data
    data = [0] * (NUM_ADC_SAMPLES)
    for i in range(NUM_ADC_SAMPLES):
        data[i] = (data_high[i] << 16 | data_low[i]) & 0x000FFFFF
        if((data[i] > 0x0007FFFF)):
            #data[i] |= 0xFFF80000
            data[i] -= 0x00100000
            #data[i] *= -1

    # write the data to a file
    if write_to_file == True:
        if verbose:
            print 'Writing data to file'
        with open('data.txt', 'w') as f:
            for i in range(NUM_ADC_SAMPLES):
                f.write(str(data[i] & 0xFFFFFFFF) + '\n')
    
        print 'File write done.'

    print 'All finished!'

# Plot data if not running pattern check
    if(plot_data == True):
        plt.figure(1)
        plt.plot(data)
        plt.title('Time Domain Samples')
        plt.show()

        adc_amplitude = 65536.0 / 2.0
        
        data_no_dc = data - np.average(data)
        
        windowscale = (NUM_ADC_SAMPLES/2) / sum(np.blackman(NUM_ADC_SAMPLES/2))
        print("Window scaling factor: " + str(windowscale))
        
        windowed_data_ch1 = data_no_dc * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
        freq_domain_ch1 = np.fft.fft(windowed_data_ch1)/(NUM_ADC_SAMPLES/2) # FFT
        freq_domain_magnitude_ch1 = np.abs(freq_domain_ch1) # Extract magnitude
        freq_domain_magnitude_db_ch1 = 20 * np.log10(freq_domain_magnitude_ch1/adc_amplitude)

        plt.figure(2)
        plt.subplot(211)
        plt.title('FFT')
        plt.plot(freq_domain_magnitude_db_ch1)
        plt.show()

