# -*- coding: utf-8 -*-
'''
DC1884 / LTM9011 family Interface Example (Also works with DC1751)

This program demonstrates how to communicate with the LTM9011 demo boards through Python.
Examples are provided for reading data captured by the ADC, or test data generated by
the ADC.

Board setup is described in Demo Manual 1884 / 1751. Follow the procedure in this manual, and
verify operation with the PScope software. Once operation is verified, exit PScope
and run this script.

Tested with Python 2.7, Anaconda distribution available from Continuum Analytics,
http://www.continuum.io/

Demo board documentation:
http://www.linear.com/demo/1884
http://www.linear.com/demo/1751
http://www.linear.com/product/LTM9011-14#demoboards

LTM9011 product page
http://www.linear.com/product/LTM9011


REVISION HISTORY
$Revision: 4624 $
$Date: 2016-01-26 15:25:57 -0800 (Tue, 26 Jan 2016) $

Copyright (c) 2016, Linear Technology Corp.(LTC)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of Linear Technology Corp.
'''

from time import sleep

import sys
sys.path.append("../../")
#print sys.path
from matplotlib import pyplot as plt
import numpy as np

# Import communication library
import ltc_controller_comm as comm

# Print extra information to console
verbose = True

# change this to collect real or test pattern data
use_test_data = False
# change this to set the output when using the test pattern
test_data_value = 0x2AAA


def ltm9011_dc1884(num_samples, verbose=False, do_demo=False):
    def vprint(s):
        """Print string only if verbose is on"""
        if verbose:
            print s
            
    if do_demo:
        plot_data = True
        write_to_file = True
    else:
        plot_data = False
        write_to_file = False


    NUM_ADC_SAMPLES = num_samples
    TOTAL_ADC_SAMPLES = 8 * NUM_ADC_SAMPLES # two channel part
    
    # find demo board with correct ID
    expected_eeprom_id = '[0071 DEMO 10 DC1884A-F LTM9006 D9011\r\n + \
    ADC 14 14 8 0000 00 00 00 00\r\n + \
    DBFLG 0003 28 32 10 00\r\n + \
    FPGA S9011 T4\r\n + \
    A94E]'
    
    controller_info = None
    print 'Looking for a DC1371 with a DC1884 demoboard'
    for info in comm.list_controllers(comm.TYPE_DC1371):
        with comm.Controller(info) as controller:
            found_eeprom_id = controller.eeprom_read_string(len(expected_eeprom_id))
            if 'DC1884' in found_eeprom_id:
                if verbose:
                    print 'Found a DC1884-x demoboard'
                controller_info = info
                break
            if 'DC1751' in found_eeprom_id:
                if verbose:
                    print 'Found a DC1751-x demoboard'
                controller_info = info
                break
    if controller_info is None:
        raise(comm.HardwareError('Could not find a compatible device'))
        
    # Open communication to the demo board
    with comm.Controller(controller_info) as controller:
    
        if verbose:
            print 'Configuring SPI registers'
    
        if use_test_data:
            if verbose:
                print 'Set to generate test data'
            reg3 = 0x80 | ((test_data_value >> 8) & 0x3F)
            reg4 = test_data_value & 0xFF
        else:
            if verbose:
                print 'Set to read real data'
            reg3 = 0x00
            reg4 = 0x00
    
        controller.dc1371_spi_choose_chip_select(1) # First bank of 4 channels
        controller.spi_send_byte_at_address(0x00, 0x80)
        controller.spi_send_byte_at_address(0x01, 0x00)
        controller.spi_send_byte_at_address(0x02, 0x00)
        controller.spi_send_byte_at_address(0x03, reg3)
        controller.spi_send_byte_at_address(0x04, reg4)
        controller.dc1371_spi_choose_chip_select(2) # Second bank of 4 channels
        controller.spi_send_byte_at_address(0x00, 0x80)
        controller.spi_send_byte_at_address(0x01, 0x00)
        controller.spi_send_byte_at_address(0x02, 0x00)
        controller.spi_send_byte_at_address(0x03, reg3)
        controller.spi_send_byte_at_address(0x04, reg4)
    
        if not controller.fpga_get_is_loaded("S9011"):
            if verbose:
                print 'Loading FPGA'
            controller.fpga_load_file("S9011")
        elif verbose:
            print 'FPGA already loaded'
    
        # demo-board specific information needed by the DC1371
        #28 32 10 00
        controller.dc1371_set_demo_config(0x28321000)
    
        if verbose:
            print 'Starting data collect'
    
        controller.data_start_collect(TOTAL_ADC_SAMPLES, comm.TRIGGER_NONE)
    
        for i in range(10):
            is_done = controller.data_is_collect_done()
            if is_done:
                break
            sleep(0.2)
    
        if not is_done:
            raise comm.HardwareError('Data collect timed out (missing clock?)')
    
        if verbose:
            print 'Data collect done.'
    
        if verbose:
            print 'Reading data'
        num_bytes, data = controller.data_receive_uint16_values(end=TOTAL_ADC_SAMPLES)
        if verbose:
            print 'Data read done'
    
    # Split data into 8 channels
        data_ch1 = [0] * NUM_ADC_SAMPLES
        data_ch2 = [0] * NUM_ADC_SAMPLES
        data_ch3 = [0] * NUM_ADC_SAMPLES
        data_ch4 = [0] * NUM_ADC_SAMPLES
        data_ch5 = [0] * NUM_ADC_SAMPLES
        data_ch6 = [0] * NUM_ADC_SAMPLES
        data_ch7 = [0] * NUM_ADC_SAMPLES
        data_ch8 = [0] * NUM_ADC_SAMPLES
        
        for i in range (0, NUM_ADC_SAMPLES):
            data_ch1[i] = data[0 + (i * 8)] & 0x3FFF
            data_ch2[i] = data[1 + (i * 8)] & 0x3FFF
            data_ch3[i] = data[2 + (i * 8)] & 0x3FFF
            data_ch4[i] = data[3 + (i * 8)] & 0x3FFF
            data_ch5[i] = data[4 + (i * 8)] & 0x3FFF
            data_ch6[i] = data[5 + (i * 8)] & 0x3FFF
            data_ch7[i] = data[6 + (i * 8)] & 0x3FFF
            data_ch8[i] = data[7 + (i * 8)] & 0x3FFF
        
        # write the data to a file
        if write_to_file:
            if verbose:
                print 'Writing data to file'
            with open('data.txt', 'w') as f:
                for i in range(NUM_ADC_SAMPLES):
                    f.write(str(data_ch1[i]) + ',' + str(data_ch2[i]) + 
                            str(data_ch3[i]) + ',' + str(data_ch4[i]) + 
                            str(data_ch5[i]) + ',' + str(data_ch6[i]) +               
                            str(data_ch7[i]) + ',' + str(data_ch8[i]) + '\n')
        
            print 'File write done.'
    
        print 'All finished!'
    
    # Plot data if requested
        if plot_data:
            plt.figure(1)
            plt.subplot(2,4,1)
            plt.plot(data_ch1)
            plt.title('CH1')
            
            plt.subplot(2,4,2)
            plt.plot(data_ch2)
            plt.title('CH2')
    
            plt.subplot(2,4,3)
            plt.plot(data_ch3)
            plt.title('CH3')
    
            plt.subplot(2,4,4)
            plt.plot(data_ch4)
            plt.title('CH4')
    
            plt.subplot(2,4,5)
            plt.plot(data_ch5)
            plt.title('CH5')
    
            plt.subplot(2,4,6)
            plt.plot(data_ch6)
            plt.title('CH6')
    
            plt.subplot(2,4,7)
            plt.plot(data_ch7)
            plt.title('CH7')
    
            plt.subplot(2,4,8)
            plt.plot(data_ch8)
            plt.title('CH8')
    
            plt.show()
    
            adc_amplitude = 16384.0 / 2.0
            
            windowscale = (NUM_ADC_SAMPLES) / sum(np.blackman(NUM_ADC_SAMPLES))
            print("Window scaling factor: " + str(windowscale))
            
            data_ch1_noDC = data_ch1 - np.average(data_ch1)
            windowed_data_ch1 = data_ch1_noDC * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
            freq_domain_ch1 = np.fft.fft(windowed_data_ch1)/(NUM_ADC_SAMPLES) # FFT
            freq_domain_magnitude_ch1 = np.abs(freq_domain_ch1) # Extract magnitude
            freq_domain_magnitude_db_ch1 = 20 * np.log10(freq_domain_magnitude_ch1/adc_amplitude)
            
            data_ch2_noDC = data_ch2 - np.average(data_ch2)
            windowed_data_ch2 = data_ch2_noDC * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
            freq_domain_ch2 = np.fft.fft(windowed_data_ch2)/(NUM_ADC_SAMPLES) # FFT
            freq_domain_magnitude_ch2 = np.abs(freq_domain_ch2) # Extract magnitude
            freq_domain_magnitude_db_ch2 = 20 * np.log10(freq_domain_magnitude_ch2/adc_amplitude)
            
            data_ch3_noDC = data_ch3 - np.average(data_ch3)
            windowed_data_ch3 = data_ch3_noDC * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
            freq_domain_ch3 = np.fft.fft(windowed_data_ch3)/(NUM_ADC_SAMPLES) # FFT
            freq_domain_magnitude_ch3 = np.abs(freq_domain_ch3) # Extract magnitude
            freq_domain_magnitude_db_ch3 = 20 * np.log10(freq_domain_magnitude_ch3/adc_amplitude)
            
            data_ch4_noDC = data_ch4 - np.average(data_ch4)
            windowed_data_ch4 = data_ch4_noDC * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
            freq_domain_ch4 = np.fft.fft(windowed_data_ch4)/(NUM_ADC_SAMPLES) # FFT
            freq_domain_magnitude_ch4 = np.abs(freq_domain_ch4) # Extract magnitude
            freq_domain_magnitude_db_ch4 = 20 * np.log10(freq_domain_magnitude_ch4/adc_amplitude)
            
            data_ch5_noDC = data_ch5 - np.average(data_ch5)
            windowed_data_ch5 = data_ch5_noDC * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
            freq_domain_ch5 = np.fft.fft(windowed_data_ch5)/(NUM_ADC_SAMPLES) # FFT
            freq_domain_magnitude_ch5 = np.abs(freq_domain_ch5) # Extract magnitude
            freq_domain_magnitude_db_ch5 = 20 * np.log10(freq_domain_magnitude_ch5/adc_amplitude)
            
            data_ch6_noDC = data_ch6 - np.average(data_ch6)
            windowed_data_ch6 = data_ch6_noDC * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
            freq_domain_ch6 = np.fft.fft(windowed_data_ch6)/(NUM_ADC_SAMPLES) # FFT
            freq_domain_magnitude_ch6 = np.abs(freq_domain_ch6) # Extract magnitude
            freq_domain_magnitude_db_ch6 = 20 * np.log10(freq_domain_magnitude_ch6/adc_amplitude)
            
            data_ch7_noDC = data_ch7 - np.average(data_ch7)
            windowed_data_ch7 = data_ch7_noDC * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
            freq_domain_ch7 = np.fft.fft(windowed_data_ch7)/(NUM_ADC_SAMPLES) # FFT
            freq_domain_magnitude_ch7 = np.abs(freq_domain_ch7) # Extract magnitude
            freq_domain_magnitude_db_ch7 = 20 * np.log10(freq_domain_magnitude_ch7/adc_amplitude)
    
            data_ch8_noDC = data_ch8 - np.average(data_ch8)
            windowed_data_ch8 = data_ch8_noDC * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
            freq_domain_ch8 = np.fft.fft(windowed_data_ch8)/(NUM_ADC_SAMPLES) # FFT
            freq_domain_magnitude_ch8 = np.abs(freq_domain_ch8) # Extract magnitude
            freq_domain_magnitude_db_ch8 = 20 * np.log10(freq_domain_magnitude_ch8/adc_amplitude)
            
            plt.figure(2)
    
            plt.subplot(2,4,1)
            plt.plot(freq_domain_magnitude_db_ch1)
            plt.title('CH1 FFT')
            
            plt.subplot(2,4,2)
            plt.plot(freq_domain_magnitude_db_ch2)
            plt.title('CH2 FFT')
    
            plt.subplot(2,4,3)
            plt.plot(freq_domain_magnitude_db_ch3)
            plt.title('CH3 FFT')
    
            plt.subplot(2,4,4)
            plt.plot(freq_domain_magnitude_db_ch4)
            plt.title('CH4 FFT')
    
            plt.subplot(2,4,5)
            plt.plot(freq_domain_magnitude_db_ch5)
            plt.title('CH5 FFT')
    
            plt.subplot(2,4,6)
            plt.plot(freq_domain_magnitude_db_ch6)
            plt.title('CH6 FFT')
    
            plt.subplot(2,4,7)
            plt.plot(freq_domain_magnitude_db_ch7)
            plt.title('CH7 FFT')
    
            plt.subplot(2,4,8)
            plt.plot(freq_domain_magnitude_db_ch8)
            plt.title('CH8 FFT')
    
            plt.show()
            
        return data_ch1, data_ch2, data_ch3, data_ch4, data_ch5, data_ch6, data_ch7, data_ch8  



if __name__ == '__main__':

# Data record length

#    NUM_SAMPLES = 1 * 1024
#    NUM_SAMPLES = 2 * 1024
#    NUM_SAMPLES = 4 * 1024
    NUM_SAMPLES = 8 * 1024
#    NUM_SAMPLES = 16 * 1024
#    NUM_SAMPLES = 32 * 1024 # This is the maximum amount of data that can be captured for all channels
#    NUM_SAMPLES = 64 * 1024 # Data for channels 5,6,7,8 is only valid to 32768 samples, garbage after that.
#    NUM_SAMPLES = 128 * 1024 # Data for channels 5,6,7,8 is only valid to 32768 samples, garbage after that.

    
    # to use this function in your own code you would typically do
    # data = ltc2378_20_dc2135(num_samples)
    # Valid number of samples are 1024 to 65536 (powers of two)
    ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8 = ltm9011_dc1884(NUM_SAMPLES, verbose=True, do_demo=True)
