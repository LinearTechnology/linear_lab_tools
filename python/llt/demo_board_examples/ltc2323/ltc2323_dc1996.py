# -*- coding: utf-8 -*-
'''
DC19996 / LTC2323 Interface Example

This program demonstrates how to communicate with the LTC2323 demo board through Python.
Examples are provided for reading data captured by the ADC, or test data generated by
the ADC.

Board setup is described in Demo Manual 1975. Follow the procedure in this manual, and
verify operation with the PScope software. Once operation is verified, exit PScope
and run this script.

Tested with Python 2.7, Anaconda distribution available from Continuum Analytics,
http://www.continuum.io/

Demo board documentation:
http://www.linear.com/demo/1996
http://www.linear.com/product/LTC2323#demoboards

LTC2323 product page
http://www.linear.com/product/LTC2323


REVISION HISTORY
$Revision: 4276 $
$Date: 2015-10-20 10:38:41 -0700 (Tue, 20 Oct 2015) $

Copyright (c) 2015, Linear Technology Corp.(LTC)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of Linear Technology Corp.
'''

from time import sleep
# Import communication library
import sys
sys.path.append("../../")
#print sys.path



import ltc_controller_comm as comm

# Print extra information to console
verbose = True
# Plot data to screen
plot_data = True
#Write data out to a text file
write_to_file = True


def ltc2323_dc1996(NUM_SAMPLES, verbose=True, do_demo=True):

    NUM_ADC_SAMPLES = NUM_SAMPLES * 2 # Total number of samples to collect
    SAMPLE_BYTES = 2
    EEPROM_ID_SIZE = 50
    
    # find demo board with correct ID
    device_info = None
    print 'Looking for a DC890 with a DC1996-X demoboard'
    for info in comm.list_controllers(comm.TYPE_DC890):
        with comm.Controller(info) as device:
            eeprom_id = device.eeprom_read_string(EEPROM_ID_SIZE)
            if 'DC1996' in eeprom_id:
                if verbose:
                    print 'Found a DC1996-X demoboard'
                device_info = info
                break
    if device_info is None:
        raise(comm.HardwareError('Could not find a compatible device'))

    # Open communication to the demo board
    with comm.Controller(device_info) as controller:
        if not controller.fpga_get_is_loaded("CMOS"):
            if verbose:
                print 'Loading FPGA'
            controller.fpga_load_file("CMOS")
        elif verbose:
            print 'FPGA already loaded'
    
        if verbose:
            print 'Starting data collect'
    
        controller.data_set_high_byte_first()
    
        controller.data_set_characteristics(True, SAMPLE_BYTES, True)
        controller.data_start_collect(NUM_ADC_SAMPLES, comm.TRIGGER_NONE)
    
        for i in range(10):
            is_done = controller.data_is_collect_done()
            if is_done:
                break
            sleep(0.2)
    
        if not is_done:
            raise comm.HardwareError('Data collect timed out (missing clock?)')
    
        if verbose:
            print 'Data collect done.'
    
        controller.dc890_flush()
    
        if verbose:
            print 'Reading data'
        num_bytes, data = controller.data_receive_uint16_values(end=NUM_ADC_SAMPLES)
        if verbose:
            print 'Data read done'
    
    # Split data into two channels
        data_ch1 = [0] * (NUM_ADC_SAMPLES/2)
        data_ch2 = [0] * (NUM_ADC_SAMPLES/2)
        
        for i in range(NUM_ADC_SAMPLES/2):
            data_ch1[i] = data[2*i]& 0xFFFF
            data_ch2[i] = data[2*i + 1]& 0xFFFF
            if(data_ch1[i] > 0x8000):
                data_ch1[i] -= 0x10000
            if(data_ch2[i] > 0x8000):
                data_ch2[i] -= 0x10000
    
        # write the data to a file
        if write_to_file == True:
            if verbose:
                print 'Writing data to file'
            with open('data.txt', 'w') as f:
                for i in range(NUM_ADC_SAMPLES/2):
                    f.write(str(data_ch1[i]) + "," + str(data_ch2[i]) + '\n')
        
            print 'File write done.'
    
        print 'All finished!'
    
    # Plot data if not running pattern check
        if(plot_data == True):
            from matplotlib import pyplot as plt
            import numpy as np
            plt.figure(1)
            plt.subplot(211)
            plt.plot(data_ch1)
            plt.title('CH0')
            plt.subplot(212)
            plt.title('CH1')
            plt.plot(data_ch2)
            plt.show()
    
            adc_amplitude = 65536.0 / 2.0
            
            data_ch1 -= np.average(data_ch1)
            data_ch2 -= np.average(data_ch2)
            
            windowscale = (NUM_ADC_SAMPLES/2) / sum(np.blackman(NUM_ADC_SAMPLES/2))
            print("Window scaling factor: " + str(windowscale))
            
            windowed_data_ch1 = data_ch1 * np.blackman(NUM_ADC_SAMPLES/2) * windowscale # Apply Blackman window
            freq_domain_ch1 = np.fft.fft(windowed_data_ch1)/(NUM_ADC_SAMPLES/2) # FFT
            freq_domain_magnitude_ch1 = np.abs(freq_domain_ch1) # Extract magnitude
            freq_domain_magnitude_db_ch1 = 20 * np.log10(freq_domain_magnitude_ch1/adc_amplitude)
    
            windowed_data_ch2 = data_ch2 * np.blackman(NUM_ADC_SAMPLES/2) * windowscale # Apply Blackman window
            freq_domain_ch2 = np.fft.fft(windowed_data_ch2)/(NUM_ADC_SAMPLES/2) # FFT
            freq_domain_magnitude_ch2 = np.abs(freq_domain_ch2) # Extract magnitude
            freq_domain_magnitude_db_ch2 = 20 * np.log10(freq_domain_magnitude_ch2/adc_amplitude)
    
            
            plt.figure(2)
            plt.subplot(211)
            plt.title('CH0 FFT')
            plt.plot(freq_domain_magnitude_db_ch1)
            plt.subplot(212)
            plt.title('CH1 FFT')
            plt.plot(freq_domain_magnitude_db_ch2)
            plt.show()
            
    return data_ch1, data_ch2

if __name__ == '__main__':

# Data record length, PER CHANNEL

#    NUM_SAMPLES = 1 * 1024
#    NUM_SAMPLES = 2 * 1024
#    NUM_SAMPLES = 4 * 1024
#    NUM_SAMPLES = 8 * 1024
#    NUM_SAMPLES = 16 * 1024
#    NUM_SAMPLES = 32 * 1024
    NUM_SAMPLES = 64 * 1024


    
    # to use this function in your own code you would typically do
    # data_ch1, data_ch2 = ltc2323_dc1996(NUM_SAMPLES, verbose=False, do_demo=False)
    # Valid number of samples are 1024 to 65536 (powers of two)
    data_ch1, data_ch2 = ltc2323_dc1996(NUM_SAMPLES, verbose=True, do_demo=True)
#
