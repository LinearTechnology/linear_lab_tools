function [methodInfo, structs, enumInfo, thunk] =  LtcControllerCommProto()
% LtcControllerCommProto Define interfaces found in 'LtcControllerCommProto'.

% This function was generated by loadlibrary.m parser version 1.1.6.37 
% on Thu May 14 10:37:38 2015
% perl options:'LtcHighSpeedComm.i -outfile = LtcControllerCommProto.m'
% cleaned up by a human

functionCells =  { cell(1, 1) };
structs =  [];
enumInfo =  [];
iFunction =  1;
functions =  struct('name', functionCells, 'calltype', functionCells, ...
    'LHS', functionCells, 'RHS', functionCells, 'alias', functionCells);
thunk =  [];

% int LccGetNumControllers(int controller_types, int max_controllers,
%        int* num_controllers);
functions.name{iFunction} = 'LccGetNumControllers'; 
functions.calltype{iFunction} = 'cdecl'; 
functions.LHS{iFunction} = 'int32'; 
functions.RHS{iFunction} = {'int32', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LccGetControllerList(int controller_types,
%        LccControllerInfo* controller_info_list, int num_controllers);
functions.name{iFunction} = 'LccGetControllerList';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'int32', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LccInitController(LccHandle* handle, LccControllerInfo
% controller_info);
functions.name{iFunction} = 'LccInitController';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtrPtr', 'LccControllerInfo'};
%functions.RHS{iFunction} = {'voidPtrPtr', 'uint8Ptr'};
iFunction = iFunction+1;

% int LccCleanup(LccHandle * handle);
functions.name{iFunction} = 'LccCleanup';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtrPtr'};
iFunction = iFunction+1;

% int LccGetDescription(LccHandle handle, char* description_buffer,
%         int description_buffer_size);
functions.name{iFunction} = 'LccGetDescription';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'cstring', 'int32'};
iFunction = iFunction+1;

% int LccGetSerialNumber(LccHandle handle, char* serial_number_buffer,
%         int serial_number_buffer_size);
functions.name{iFunction} = 'LccGetSerialNumber';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'cstring', 'int32'};
iFunction = iFunction+1;

% int LccReset(LccHandle handle);
functions.name{iFunction} = 'LccReset';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction + 1;

% int LccClose(LccHandle handle); 
functions.name{iFunction} = 'LccClose';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction+1;

% int LccGetErrorInfo(LccHandle handle, char * message_buffer,
%     int buffer_size); 
functions.name{iFunction} = 'LccGetErrorInfo';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'cstring', 'int32'};
iFunction = iFunction+1;

% int LccDataSetHighByteFirst(LccHandle handle)
functions.name{iFunction} = 'LccDataSetHighByteFirst';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction+1;

% int LccDataSetLowByteFirst(LccHandle handle)
functions.name{iFunction} = 'LccDataSetLowByteFirst';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction+1;

% int LccDataSendBytes(LccHandle handle, uint8_t * values, 
%     int num_values, int * num_sent); 
functions.name{iFunction} = 'LccDataSendBytes';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LccDataReceiveBytes(LccHandle handle, uint8_t * values, 
%     int num_values, int * num_received); 
functions.name{iFunction} = 'LccDataReceiveBytes';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LccDataSendUint16Values(LccHandle handle, uint16_t * values,
%     int num_values, int * num_bytes_sent); 
functions.name{iFunction} = 'LccDataSendUint16Values';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint16Ptr', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LccDataReceiveUint16Values(LccHandle handle, uint16_t * values,
%     int num_values, int * num_bytes_received); 
functions.name{iFunction} = 'LccDataReceiveUint16Values';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint16Ptr', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LccDataSendUint32Values(LccHandle handle, uint32_t * values,
%     int num_values, int * num_bytes_sent); 
functions.name{iFunction} = 'LccDataSendUint32Values';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint32Ptr', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LccDataReceiveUint32Values(LccHandle handle, uint32_t * values,
%     int num_values, int * num_bytes_received); 
functions.name{iFunction} = 'LccDataReceiveUint32Values';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint32Ptr', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LccDataStartCollect(LccHandle handle, int total_samples, int trigger);
functions.name{iFunction} = 'LccDataStartCollect';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'int32', 'int32'};
iFunction = iFunction+1;

% int LccDataIsCollectDone(LccHandle handle, bool* is_done);
functions.name{iFunction} = 'LccDataIsCollectDone';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'int8Ptr'};
iFunction = iFunction+1;

% int LccDataCancelCollect(LccHandle handle);
functions.name{iFunction} = 'LccDataCancelCollect';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction+1;

% int LccDataSetCharacteristics(LccHandle handle, bool is_multichannel,
%        int sample_bytes, bool is_positive_clock);
functions.name{iFunction} = 'LccDataSetCharacteristics';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'int8', 'uint32', 'int8'};
iFunction = iFunction+1;

% int LccSpiSendBytes(LccHandle handle, uint8_t * values,
%     int num_values); 
functions.name{iFunction} = 'LccSpiSendBytes';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LccSpiReceiveBytes(LccHandle handle, uint8_t * values,
%     int num_values); 
functions.name{iFunction} = 'LccSpiReceiveBytes';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LccSpiTransceiveBytes(LccHandle handle, uint8_t * send_values,
%     uint8_t * receive_values, int num_values); 
functions.name{iFunction} = 'LccSpiTransceiveBytes';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LccSpiSendByteAtAddress(LccHandle handle, uint32_t address,
%     uint8_t value); 
functions.name{iFunction} = 'LccSpiSendByteAtAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8', 'uint8'};
iFunction = iFunction+1;

% int LccSpiSendBytesAtAddress(LccHandle handle, uint8_t address,
%         uint8_t* values, int num_values);
functions.name{iFunction} = 'LccSpiSendBytesAtAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8', ...
    'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LccSpiReceiveByteAtAddress(LccHandle handle, uint8_t address,
%         uint8_t* value);
functions.name{iFunction} = 'LccSpiReceiveByteAtAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8', 'uint8Ptr'};
iFunction = iFunction+1;

% int LccSpiReceiveBytesAtAddress(LccHandle handle, uint8_t address,
%         uint8_t* values, int num_values);
functions.name{iFunction} = 'LccSpiReceiveBytesAtAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8', ...
    'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LccSpiSetCsState(LccHandle handle, int chip_select_state); 
functions.name{iFunction} = 'LccSpiSetCsState';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'int32'};
iFunction = iFunction+1;

% int LccSpiSendNoChipSelect(LccHandle handle, uint8_t * values,
%     int num_values); 
functions.name{iFunction} = 'LccSpiSendNoChipSelect';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LccSpiReceiveNoChipSelect(LccHandle handle, uint8_t * values,
%     int num_values); 
functions.name{iFunction} = 'LccSpiReceiveNoChipSelect';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LccSpiTransceiveNoChipSelect(LccHandle handle,
%     uint8_t * send_values, uint8_t * receive_values, int num_values); 
functions.name{iFunction} = 'LccSpiTransceiveNoChipSelect';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LccFpgaGetIsLoaded(LccHandle, const char* fpga_filename,
% bool* is_loaded);
functions.name{iFunction} = 'LccFpgaGetIsLoaded';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'cstring', 'int8Ptr'};
iFunction = iFunction+1;

% int LccFpgaLoadFile(LccHandle, const char* fpga_filename);
functions.name{iFunction} = 'LccFpgaLoadFile';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'cstring'};
iFunction = iFunction+1;

% int LccFpgaLoadFileChunked(LccHandle handle, const char* fpga_filename,
%        int* progress);
functions.name{iFunction} = 'LccFpgaLoadFileChunked';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'cstring', 'int32Ptr'};
iFunction = iFunction+1;

% int LccFpgaCancelLoad(LccHandle handle);
functions.name{iFunction} = 'LccFpgaCancelLoad';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction+1;

% int LccEepromReadString(LccHandle handle,
%     char * buffer, int buffer_size); 
functions.name{iFunction} = 'LccEepromReadString';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'cstring', 'int32'};
iFunction = iFunction+1;

% int HsLccPurgeIo(LccHandle handle); 
functions.name{iFunction} = 'LccHsPurgeIo';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction+1;

% int HsLccSetBitMode(LccHandle handle, int mode); 
functions.name{iFunction} = 'LccHsSetBitMode';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'int32'};
iFunction = iFunction+1;

% int LccHsFpgaToggleReset(LccHandle handle); 
functions.name{iFunction} = 'LccHsFpgaToggleReset';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction+1;

% int LccHsFpgaWriteAddress(LccHandle handle, uint8_t address); 
functions.name{iFunction} = 'LccHsFpgaWriteAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8'};
iFunction = iFunction+1;

% int LccHsFpgaWriteData(LccHandle handle, uint8_t value); 
functions.name{iFunction} = 'LccHsFpgaWriteData';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8'};
iFunction = iFunction+1;

% int LccHsFpgaReadData(LccHandle handle, uint8_t * value); 
functions.name{iFunction} = 'LccHsFpgaReadData';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr'};
iFunction = iFunction+1;

% int LccHsFpgaWriteDataAtAddress(LccHandle handle, uint8_t address,
%     uint8_t value); 
functions.name{iFunction} = 'LccHsFpgaWriteDataAtAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8', 'uint8'};
iFunction = iFunction+1;

% int LccHsFpgaReadDataAtAddress(LccHandle handle, uint8_t address,
%     uint8_t * value); 
functions.name{iFunction} = 'LccHsFpgaReadDataAtAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8', 'uint8Ptr'};
iFunction = iFunction+1;

% int LccHsGpioWriteHighByte(LccHandle handle, uint8_t value); 
functions.name{iFunction} = 'LccHsGpioWriteHighByte';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8'};
iFunction = iFunction+1;

% int LccHsGpioReadHighByte(LccHandle handle, uint8_t * value); 
functions.name{iFunction} = 'LccHsGpioReadHighByte';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr'};
iFunction = iFunction+1;

% int LccHsGpioWriteLowByte(LccHandle handle, uint8_t value); 
functions.name{iFunction} = 'LccHsGpioWriteLowByte';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8'};
iFunction = iFunction+1;

% int LccHsGpioReadLowByte(LccHandle handle, uint8_t * value); 
functions.name{iFunction} = 'LccHsGpioReadLowByte';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr'};
iFunction = iFunction+1;

% int LccHsFpgaEepromSetBitBangRegister(LccHandle, uint8_t register_address); 
functions.name{iFunction} = 'LccHsFpgaEepromSetBitBangRegister';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8'};
iFunction = iFunction+1;

% int Lcc1371SetGenericConfig(LccHandle handle, uint32_t generic_config); 
functions.name{iFunction} = 'Lcc1371SetGenericConfig';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint32'};
iFunction = iFunction+1;

% int Lcc1371SetDemoConfig(LccHandle handle, uint32_t generic_config); 
functions.name{iFunction} = 'Lcc1371SetDemoConfig';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint32'};
iFunction = iFunction+1;

% int Lcc890GpioSetByte(LccHandle handle, uint8_t byte);
functions.name{iFunction} = 'Lcc890GpioSetByte';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8'};
iFunction = iFunction+1;

% Lcc890GpioSpiSetBits(LccHandle handle, int cs_bit, 
%        int sck_bit, int sdi_bit);
functions.name{iFunction} = 'Lcc890GpioSpiSetBits';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'int32', 'int32', 'int32'};
iFunction = iFunction+1;

% int Lcc890Flush(LccHandle handle);
functions.name{iFunction} = 'Lcc890Flush';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};

structs.LccControllerInfo.members = struct('type', 'int32', ...
    'description', 'int8#64','serial_number', 'int8#16','id','uint32' );

methodInfo =  functions;