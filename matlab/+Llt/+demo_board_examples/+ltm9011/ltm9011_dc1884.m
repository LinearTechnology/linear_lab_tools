% DC1884 / LTM9011 Interface Example (Also works with DC1751)
% LTC2338: 18-Bit, 15Msps SAR ADC
%
% This program demonstrates how to communicate with the LTM9011 demo board through MATLAB.
% Examples are provided for reading data captured by the ADC, or test data generated by
% the ADC.
% 
% Board setup is described in Demo Manual 1884 / 1751. Follow the procedure in this manual, and
% verify operation with the PScope software. Once operation is verified, exit PScope
% and run this script.
% 
% Demo board documentation:
% http://www.linear.com/demo/1884
% http://www.linear.com/demo/1751
% http://www.linear.com/product/LTM9011-14#demoboards
% 
% LTC2338 product page
% http://www.linear.com/product/LTM9011
%  
% REVISION HISTORY
% $Revision: 4260 $
% $Date: 2015-10-19 16:45:28 -0700 (Mon, 19 Oct 2015) $
%
% Copyright (c) 2015, Linear Technology Corp.(LTC)
% All rights reserved.
% 
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
% 
% 1. Redistributions of source code must retain the above copyright notice, 
%    this list of conditions and the following disclaimer.
% 2. Redistributions in binary form must reproduce the above copyright notice,
%    this list of conditions and the following disclaimer in the documentation
%    and/or other materials provided with the distribution.
% 
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
% ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
% WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
% DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
% ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
% (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
% LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
% ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
% (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
% SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
% 
% The views and conclusions contained in the software and documentation are those
% of the authors and should not be interpreted as representing official policies,
% either expressed or implied, of Linear Technology Corp.

% NOTE:
% 	ADD THE ABSOLUTE PATH TO "linear_lab_tools\matlab" FOLDER BEFORE RUNNING THE SCRIPT.
%   RUN "mex -setup" TO SET UP COMPILER AND CHOSE THE OPTION "Lcc-win32 C".

function [ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8] = ...
        ltm9011_dc1884(num_samples, is_verbose, do_plot, do_write_to_file)
    if ~exist('num_samples', 'var'); num_samples = 32*1024; end
    do_demo = false;
    if nargout == 0; do_demo = true; end
    if ~exist('verbose', 'var'); is_verbose = do_demo; end;
    if ~exist('do_plot', 'var'); do_plot = do_demo; end;
    if ~exist('do_write_to_file', 'var'); do_write_to_file = do_demo; end;
    
    % LTM9011 Serial Programming Mode Registers
    RESET_REG = 0;
    POWER_DOWN_REG = 1;
    OUTPUT_MODE_REG = 2;
    TEST_PATTERN_MSB_REG = 3;
    TEST_PATTERN_LSB_REG = 4;
    
    total_adc_samples = 8 * num_samples;    % two channel part
    %change this to collect real or test pattern data
    use_test_data = false;
    % change this to set the output when using the test pattern
    test_data_value = 10922;
    
    % Returns the object in the class constructor
    comm = llt.common.LtcControllerComm();  
    
    % find demo board with correct ID
%     EEPROM_ID = '[0071 DEMO 10 DC1884A-F LTM9006 D9011\r\n + \
%     ADC 14 14 8 0000 00 00 00 00\r\n + \
%     DBFLG 0003 28 32 10 00\r\n + \
%     FPGA S9011 T4\r\n + \
%     A94E]';
    
    eeprom_id_size = 141;
    % eepromIdSize = length(EEPROM_ID);
    fprintf('Looking for a DC1371 with a DC1884 demoboard');
 
    device_info_list = comm.list_controllers(comm.TYPE_DC1371);
    
	% Open communication to the device
    cid = comm.init(device_info_list);
    
    for info = device_info_list
        % if strcmp(EEPROM_ID(1 : eeprom_id_size - 1), comm.eeprom_read_string(cId, eeprom_id_size))
        if ~isempty(strfind(comm.eeprom_read_string(cid, eeprom_id_size), 'DC1884'))
            fprintf('\nFound a DC1884-x demoboard');
            break;
        end
        if ~isempty(strfind(comm.eeprom_read_string(cid, eeprom_id_size), 'DC1751'))
            fprintf('\nFound a DC1751-x demoboard');
            break;
        end
        cid = comm.cleanup(cid);
    end
    
    if(cid == 0)
        fprintf('\nDevice not found');
    else
        fprintf('\nDevice Found');
    end
    
    if(is_verbose)
        fprintf('\nConfiguring SPI registers');
    end
    
    if (use_test_data)
        if is_verbose
            fprintf('\nSet to generate test data');
        end
        reg3 = int32(test_data_value);
        reg3 = int32(bitshift(test_data_value, -8));
        reg3 = bitor(bitand(reg3, 63), 128);
        reg4 = bitand(test_data_value, 255);
    else
        if is_verbose
            fprintf('\nSet to read real data');
        end
        reg3 = 0;
        reg4 = 0;
    end
    
    % First bank of 4 channels
    comm.dc1371_spi_choose_chip_select(cid, 1); 
    % Software Reset
    comm.spi_send_byte_at_address(cid, RESET_REG, 128); 
    % Enable Clock DCS, Disable Output Randomizer, Enable Binary Data Format
    comm.spi_send_byte_at_address(cid, POWER_DOWN_REG, 0);  
    % Disable LVDS Internal Terminaion, Enable Digital Outputs, 2 Lanes, 16 - Bit
    comm.spi_send_byte_at_address(cid, OUTPUT_MODE_REG, 0);
    % Enable Digital Output Teast Pattern, Bits D5:D0 holds TP13:TP8
    comm.spi_send_byte_at_address(cid, TEST_PATTERN_MSB_REG, reg3);
    % Bits D7:D0 holds TP7:TP0
    comm.spi_send_byte_at_address(cid, TEST_PATTERN_LSB_REG, reg4);
    
    % Second bank of 4 channels
    comm.dc1371_spi_choose_chip_select(cid, 2); 
    % Software Reset
    comm.spi_send_byte_at_address(cid, RESET_REG, 128); 
    % Enable Clock DCS, Disable Output Randomizer, Enable Binary Data Format
    comm.spi_send_byte_at_address(cid, POWER_DOWN_REG, 0);  
    % Disable LVDS Internal Terminaion, Enable Digital Outputs, 2 Lanes, 16 - Bit
    comm.spi_send_byte_at_address(cid, OUTPUT_MODE_REG, 0);
    % Enable Digital Output Teast Pattern, Bits D5:D0 holds TP13:TP8
    comm.spi_send_byte_at_address(cid, TEST_PATTERN_MSB_REG, reg3);
    % Bits D7:D0 holds TP7:TP0
    comm.spi_send_byte_at_address(cid, TEST_PATTERN_LSB_REG, reg4);
    
    if (comm.fpga_get_is_loaded(cid, 'S9011'))
       if(is_verbose)
            fprintf('Loading FPGA\n');
       end 
       comm.fpga_load_file(cid, 'S9011');
    else
       if(is_verbose)
            fprintf('FPGA already loaded\n');
       end 
    end
    
    % demo-board specific information needed by the DC1371 (0x28321000)
    comm.dc1371_set_demo_config(cid, '28321000')

    if(is_verbose)
        fprintf('Starting Data Collect\n');
    end 
    
    comm.data_start_collect(cid, total_adc_samples, comm.TRIGGER_NONE);
    
    for i = 1: 10
        is_done = comm.data_is_collect_done(cid);
        if(is_done)
            break;
        end
        pause(0.2);
    end
    
    if(is_done ~= true)
        error('LtcControllerComm:HardwareError', ...
            'Data collect timed out (missing clock?)');
    end
    
    if(is_verbose)
        fprintf('Data Collect done\n');
    end
    
    if(is_verbose)
        fprintf('Reading data\n');
    end
    
    data = comm.data_receive_uint16_values(cid, total_adc_samples);
    
    if(is_verbose)
        fprintf('Data Read done\n');
    end
    
    % Split data into 8 channels
    data_ch1(1 : num_samples) = data(1 : 8 : total_adc_samples);
    data_ch2(1 : num_samples) = data(2 : 8 : total_adc_samples);
    data_ch3(1 : num_samples) = data(3 : 8 : total_adc_samples);
    data_ch4(1 : num_samples) = data(4 : 8 : total_adc_samples);
    data_ch5(1 : num_samples) = data(5 : 8 : total_adc_samples);
    data_ch6(1 : num_samples) = data(6 : 8 : total_adc_samples);
    data_ch7(1 : num_samples) = data(7 : 8 : total_adc_samples);
    data_ch8(1 : num_samples) = data(8 : 8 : total_adc_samples);
    
    % Data to be returned
    ch1 = data_ch1;
    ch2 = data_ch2;
    ch3 = data_ch3;
    ch4 = data_ch4;
    ch5 = data_ch5;
    ch6 = data_ch6;
    ch7 = data_ch7;
    ch8 = data_ch8;
    
    if do_write_to_file
        if is_verbose
            fprintf('Writing data to file\n');
        end    

        file_iD = fopen('data.txt','w');

        for i = 1:num_samples
            fprintf(file_iD,'%d, %d, %d, %d, %d, %d, %d, %d\n', ...
                data_ch1(i), data_ch2(i), data_ch3(i), data_ch4(i), ...
                data_ch5(i), data_ch6(i), data_ch7(i), data_ch8(i));
        end

        fclose(file_iD);
        fprintf('File write done\n');
    end
    
    if(do_plot == true)
        figure(1)
        subplot(2, 4, 1)
        plot(data_ch1)
        title('CH1')
        
        subplot(2, 4, 2)
        plot(data_ch2)
        title('CH2')
        
        subplot(2, 4, 3)
        plot(data_ch3)
        title('CH3')
        
        subplot(2, 4, 4)
        plot(data_ch4)
        title('CH4')
        
        subplot(2, 4, 5)
        plot(data_ch5)
        title('CH5')
        
        subplot(2, 4, 6)
        plot(data_ch6)
        title('CH6')
        
        subplot(2, 4, 7)
        plot(data_ch7)
        title('CH7')
        
        subplot(2, 4, 8)
        plot(data_ch8)
        title('CH8')
        
        adc_amplitude = 16384.0 / 2.0;

        window_scale = (num_samples) / sum(llt.common.fft_window(num_samples));
        fprintf('Window scaling factor: %d\n', window_scale);

        data_ch1 = data_ch1 - mean(data_ch1);
        windowed_data_ch1 = data_ch1' .* llt.common.fft_window(num_samples);
        windowed_data_ch1 = windowed_data_ch1 .* window_scale; 	% Apply BlackmanHarris92 window
        freq_domain_ch1 = fft(windowed_data_ch1)/(num_samples); % FFT
        freq_domain_magnitude_ch1 = abs(freq_domain_ch1); 		% Extract magnitude
        freq_domain_magnitude_db_ch1 = 20 * log10(freq_domain_magnitude_ch1/adc_amplitude);
        
        data_ch2 = data_ch2 - mean(data_ch2);
        windowed_data_ch2 = data_ch2' .* llt.common.fft_window(num_samples);
        windowed_data_ch2 = windowed_data_ch2 .* window_scale; 	% Apply BlackmanHarris92 window
        freq_domain_ch2 = fft(windowed_data_ch2)/(num_samples); % FFT
        freq_domain_magnitude_ch2 = abs(freq_domain_ch2); 		% Extract magnitude
        freq_domain_magnitude_db_ch2 = 20 * log10(freq_domain_magnitude_ch2/adc_amplitude);
        
        data_ch3 = data_ch3 - mean(data_ch3);
        windowed_data_ch3 = data_ch3' .* llt.common.fft_window(num_samples);
        windowed_data_ch3 = windowed_data_ch3 .* window_scale; 	% Apply BlackmanHarris92 window
        freq_domain_ch3 = fft(windowed_data_ch3)/(num_samples); % FFT
        freq_domain_magnitude_ch3 = abs(freq_domain_ch3); 		% Extract magnitude
        freq_domain_magnitude_db_ch3 = 20 * log10(freq_domain_magnitude_ch3/adc_amplitude);
        
        data_ch4 = data_ch4 - mean(data_ch4);
        windowed_data_ch4 = data_ch4' .* llt.common.fft_window(num_samples);
        windowed_data_ch4 = windowed_data_ch4 .* window_scale; 	% Apply BlackmanHarris92 window
        freq_domain_ch4 = fft(windowed_data_ch4)/(num_samples); % FFT
        freq_domain_magnitude_ch4 = abs(freq_domain_ch4); 		% Extract magnitude
        freq_domain_magnitude_db_ch4 = 20 * log10(freq_domain_magnitude_ch4/adc_amplitude);
        
        data_ch5 = data_ch5 - mean(data_ch5);
        windowed_data_ch5 = data_ch5' .* llt.common.fft_window(num_samples);
        windowed_data_ch5 = windowed_data_ch5 .* window_scale; 	% Apply BlackmanHarris92 window
        freq_domain_ch5 = fft(windowed_data_ch5)/(num_samples); % FFT
        freq_domain_magnitude_ch5 = abs(freq_domain_ch5); 		% Extract magnitude
        freq_domain_magnitude_db_ch5 = 20 * log10(freq_domain_magnitude_ch5/adc_amplitude);
        
        data_ch6 = data_ch6 - mean(data_ch6);
        windowed_data_ch6 = data_ch6' .* llt.common.fft_window(num_samples);
        windowed_data_ch6 = windowed_data_ch6 .* window_scale; 	% Apply BlackmanHarris92 window
        freq_domain_ch6 = fft(windowed_data_ch6)/(num_samples); % FFT
        freq_domain_magnitude_ch6 = abs(freq_domain_ch6); 		% Extract magnitude
        freq_domain_magnitude_db_ch6 = 20 * log10(freq_domain_magnitude_ch6/adc_amplitude);
        
        data_ch7 = data_ch7 - mean(data_ch7);
        windowed_data_ch7 = data_ch7' .* llt.common.fft_window(num_samples);
        windowed_data_ch7 = windowed_data_ch7 .* window_scale; 	% Apply BlackmanHarris92 window
        freq_domain_ch7 = fft(windowed_data_ch7)/(num_samples); % FFT
        freq_domain_magnitude_ch7 = abs(freq_domain_ch7); 		% Extract magnitude
        freq_domain_magnitude_db_ch7 = 20 * log10(freq_domain_magnitude_ch7/adc_amplitude);
        
        data_ch8 = data_ch8 - mean(data_ch8);
        windowed_data_ch8 = data_ch8' .* llt.common.fft_window(num_samples);
        windowed_data_ch8 = windowed_data_ch8 .* window_scale; 	% Apply BlackmanHarris92 window
        freq_domain_ch8 = fft(windowed_data_ch8)/(num_samples); % FFT
        freq_domain_magnitude_ch8 = abs(freq_domain_ch8); 		% Extract magnitude
        freq_domain_magnitude_db_ch8 = 20 * log10(freq_domain_magnitude_ch8/adc_amplitude);
        
        figure(2)
        subplot(2, 4, 1)
        plot(freq_domain_magnitude_db_ch1)
        title('CH1 FFT')
        
        subplot(2, 4, 2)
        plot(freq_domain_magnitude_db_ch2)
        title('CH2 FFT')
        
        subplot(2, 4, 3)
        plot(freq_domain_magnitude_db_ch3)
        title('CH3 FFT')
        
        subplot(2, 4, 4)
        plot(freq_domain_magnitude_db_ch4)
        title('CH4 FFT')
        
        subplot(2, 4, 5)
        plot(freq_domain_magnitude_db_ch5)
        title('CH5 FFT')
        
        subplot(2, 4, 6)
        plot(freq_domain_magnitude_db_ch6)
        title('CH6 FFT')
        
        subplot(2, 4, 7)
        plot(freq_domain_magnitude_db_ch7)
        title('CH7 FFT')
        
        subplot(2, 4, 8)
        plot(freq_domain_magnitude_db_ch8)
        title('CH8 FFT')
        
    end
    fprintf('All finished\n');
    
end

    