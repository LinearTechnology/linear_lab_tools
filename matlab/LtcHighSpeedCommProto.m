function [methodInfo, structs, enumInfo, thunk] =  LtcHighSpeedCommProto()
% LtcHighSpeedCommProto Define interfaces found in 'LtcHighSpeedComm'.

% This function was generated by loadlibrary.m parser version 1.1.6.37 
% on Thu May 14 10:37:38 2015
% perl options:'LtcHighSpeedComm.i -outfile = LtcHighSpeedCommProto.m'
% cleaned up by a human

functionCells =  { cell(1, 42) };
structs =  [];
enumInfo =  [];
iFunction =  1;
functions =  struct('name', functionCells, 'calltype', functionCells, ...
    'LHS', functionCells, 'RHS', functionCells, 'alias', functionCells);
thunk =  [];

% int LthsCreateDeviceList(int * num_devices); 
functions.name{iFunction} = 'LthsCreateDeviceList'; 
functions.calltype{iFunction} = 'cdecl'; 
functions.LHS{iFunction} = 'int32'; 
functions.RHS{iFunction} = {'int32Ptr'};
iFunction = iFunction+1;

% int LthsGetDeviceList(LthsDeviceInfo * device_info_list, 
% int num_devices); 
functions.name{iFunction} = 'LthsGetDeviceList';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'LthsDeviceInfoPtr', 'int32'};
functions.RHS{iFunction} = {'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LthsInitDevice(LthsHandle * handle, LthsDeviceInfo device_info); 
functions.name{iFunction} = 'LthsInitDevice';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtrPtr', 'LthsDeviceInfo'};
%functions.RHS{iFunction} = {'voidPtrPtr', 'uint8Ptr'};
iFunction = iFunction+1;

% int LthsCleanup(LthsHandle * handle); 
functions.name{iFunction} = 'LthsCleanup';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtrPtr'};
iFunction = iFunction+1;

% int LthsGetDescription(LthsHandle handle, char * description_buffer,
%     int description_buffer_size); 
functions.name{iFunction} = 'LthsGetDescription';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'cstring', 'int32'};
iFunction = iFunction+1;

% int LthsGetSerialNumber(LthsHandle handle, char * serial_number_buffer,
%     int serial_number_buffer_size); 
functions.name{iFunction} = 'LthsGetSerialNumber';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'cstring', 'int32'};
iFunction = iFunction+1;

% int LthsSetTimeouts(LthsHandle handle, int read_timeout,
%     int write_timeout); 
functions.name{iFunction} = 'LthsSetTimeouts';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'int32', 'int32'};
iFunction = iFunction+1;

% int LthsSetBitMode(LthsHandle handle, int mode); 
functions.name{iFunction} = 'LthsSetBitMode';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'int32'};
iFunction = iFunction+1;

% int LthsPurgeIo(LthsHandle handle); 
functions.name{iFunction} = 'LthsPurgeIo';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction+1;

% int LthsClose(LthsHandle handle); 
functions.name{iFunction} = 'LthsClose';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction+1;

% int LthsGetErrorInfo(LthsHandle handle, char * message_buffer,
%     int buffer_size); 
functions.name{iFunction} = 'LthsGetErrorInfo';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'cstring', 'int32'};
iFunction = iFunction+1;

% int LthsFifoSetHighByteFirst(LthsHandle handle)
functions.name{iFunction} = 'LthsFifoSetHighByteFirst';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction+1;

% int LthsFifoSetLowByteFirst(LthsHandle handle)
functions.name{iFunction} = 'LthsFifoSetLowByteFirst';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction+1;

% int LthsFifoSendBytes(LthsHandle handle, uint8_t * values, 
%     int num_values, int * num_sent); 
functions.name{iFunction} = 'LthsFifoSendBytes';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LthsFifoReceiveBytes(LthsHandle handle, uint8_t * values, 
%     int num_values, int * num_received); 
functions.name{iFunction} = 'LthsFifoReceiveBytes';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LthsFifoSendUint16Values(LthsHandle handle, uint16_t * values,
%     int num_values, int * num_bytes_sent); 
functions.name{iFunction} = 'LthsFifoSendUint16Values';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint16Ptr', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LthsFifoReceiveUint16Values(LthsHandle handle, uint16_t * values,
%     int num_values, int * num_bytes_received); 
functions.name{iFunction} = 'LthsFifoReceiveUint16Values';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint16Ptr', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LthsFifoSendUint32Values(LthsHandle handle, uint32_t * values,
%     int num_values, int * num_bytes_sent); 
functions.name{iFunction} = 'LthsFifoSendUint32Values';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint32Ptr', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LthsFifoReceiveUint32Values(LthsHandle handle, uint32_t * values,
%     int num_values, int * num_bytes_received); 
functions.name{iFunction} = 'LthsFifoReceiveUint32Values';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint32Ptr', 'int32', 'int32Ptr'};
iFunction = iFunction+1;

% int LthsSpiSendBytes(LthsHandle handle, uint8_t * values,
%     int num_values); 
functions.name{iFunction} = 'LthsSpiSendBytes';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LthsSpiReceiveBytes(LthsHandle handle, uint8_t * values,
%     int num_values); 
functions.name{iFunction} = 'LthsSpiReceiveBytes';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LthsSpiTransceiveBytes(LthsHandle handle, uint8_t * send_values,
%     uint8_t * receive_values, int num_values); 
functions.name{iFunction} = 'LthsSpiTransceiveBytes';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LthsSpiSendByteAtAddress(LthsHandle handle, uint32_t address,
%     uint8_t value); 
functions.name{iFunction} = 'LthsSpiSendByteAtAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint32', 'uint8'};
iFunction = iFunction+1;

% int LthsSpiSendBytesAtAddress(LthsHandle handle, uint32_t address,
%     uint8_t * values, int num_values); 
functions.name{iFunction} = 'LthsSpiSendBytesAtAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint32', ...
    'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LthsSpiReceiveByteAtAddress(LthsHandle handle, uint32_t address,
%     uint8_t * value); 
functions.name{iFunction} = 'LthsSpiReceiveByteAtAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint32', 'uint8Ptr'};
iFunction = iFunction+1;

% int LthsSpiReceiveBytesAtAddress(LthsHandle handle, uint32_t address,
%     uint8_t * values, int num_values); 
functions.name{iFunction} = 'LthsSpiReceiveBytesAtAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint32', ...
    'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LthsSpiSetChipSelect(LthsHandle handle, int pin_state); 
functions.name{iFunction} = 'LthsSpiSetChipSelect';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'int32'};
iFunction = iFunction+1;

% int LthsSpiSendNoChipSelect(LthsHandle handle, uint8_t * values,
%     int num_values); 
functions.name{iFunction} = 'LthsSpiSendNoChipSelect';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LthsSpiReceiveNoChipSelect(LthsHandle handle, uint8_t * values,
%     int num_values); 
functions.name{iFunction} = 'LthsSpiReceiveNoChipSelect';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LthsSpiTransceiveNoChipSelect(LthsHandle handle,
%     uint8_t * send_values, uint8_t * receive_values, int num_values); 
functions.name{iFunction} = 'LthsSpiTransceiveNoChipSelect';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr', 'uint8Ptr', 'int32'};
iFunction = iFunction+1;

% int LthsFpgaToggleReset(LthsHandle handle); 
functions.name{iFunction} = 'LthsFpgaToggleReset';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr'};
iFunction = iFunction+1;

% int LthsFpgaWriteAddress(LthsHandle handle, uint8_t address); 
functions.name{iFunction} = 'LthsFpgaWriteAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8'};
iFunction = iFunction+1;

% int LthsFpgaWriteData(LthsHandle handle, uint8_t value); 
functions.name{iFunction} = 'LthsFpgaWriteData';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8'};
iFunction = iFunction+1;

% int LthsFpgaReadData(LthsHandle handle, uint8_t * value); 
functions.name{iFunction} = 'LthsFpgaReadData';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr'};
iFunction = iFunction+1;

% int LthsFpgaWriteDataAtAddress(LthsHandle handle, uint8_t address,
%     uint8_t value); 
functions.name{iFunction} = 'LthsFpgaWriteDataAtAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8', 'uint8'};
iFunction = iFunction+1;

% int LthsFpgaReadDataAtAddress(LthsHandle handle, uint8_t address,
%     uint8_t * value); 
functions.name{iFunction} = 'LthsFpgaReadDataAtAddress';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8', 'uint8Ptr'};
iFunction = iFunction+1;

% int LthsGpioWriteHighByte(LthsHandle handle, uint8_t value); 
functions.name{iFunction} = 'LthsGpioWriteHighByte';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8'};
iFunction = iFunction+1;

% int LthsGpioReadHighByte(LthsHandle handle, uint8_t * value); 
functions.name{iFunction} = 'LthsGpioReadHighByte';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr'};
iFunction = iFunction+1;

% int LthsGpioWriteLowByte(LthsHandle handle, uint8_t value); 
functions.name{iFunction} = 'LthsGpioWriteLowByte';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8'};
iFunction = iFunction+1;

% int LthsGpioReadLowByte(LthsHandle handle, uint8_t * value); 
functions.name{iFunction} = 'LthsGpioReadLowByte';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8Ptr'};
iFunction = iFunction+1;

% int LthsFpgaEepromSetBitBangRegister(LthsHandle, uint8_t register_address); 
functions.name{iFunction} = 'LthsFpgaEepromSetBitBangRegister';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'uint8'};
iFunction = iFunction+1;

% int LthsFpgaEepromReadString(LthsHandle handle,
%     char * buffer, int buffer_size); 
functions.name{iFunction} = 'LthsFpgaEepromReadString';
functions.calltype{iFunction} = 'cdecl';
functions.LHS{iFunction} = 'int32';
functions.RHS{iFunction} = {'voidPtr', 'cstring', 'int32'};

structs.LthsDeviceInfo.members = struct('indices', 'ulong#2', ...
    'serial_number', 'int8#16', 'description', 'int8#64');

methodInfo =  functions;