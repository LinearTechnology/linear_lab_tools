# -*- coding: utf-8 -*-
'''

HACKED TO HANDLE TWO BOARDS!!!

DC1620 / LTC2145 Interface Example

This program demonstrates how to communicate with the LTC2145 demo board through Python.
Examples are provided for reading data captured by the ADC, or test data generated by
the ADC.

Board setup is described in Demo Manual 1975. Follow the procedure in this manual, and
verify operation with the PScope software. Once operation is verified, exit PScope
and run this script.

Tested with Python 2.7, Anaconda distribution available from Continuum Analytics,
http://www.continuum.io/

Demo board documentation:
http://www.linear.com/demo/1620
http://www.linear.com/product/LTC2145#demoboards

LTC2145 product page
http://www.linear.com/product/LTC2145


REVISION HISTORY
$Revision: 4276 $
$Date: 2015-10-20 10:38:41 -0700 (Tue, 20 Oct 2015) $

Copyright (c) 2015, Linear Technology Corp.(LTC)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of Linear Technology Corp.
'''

from time import sleep
import sys
# Import communication library
sys.path.append("../../")
#print sys.path
import ltc_controller_comm as comm


def ltc2145_dc1620(NUM_SAMPLES, verbose=True, do_demo=True, trigger=False, timeout=1):

    def vprint(s):
        """Print string only if verbose is on"""
        if verbose:
            print s

    if(do_demo):
        # Plot data to screen
        plot_data = True
        #Write data out to a text file
        write_to_file = True

    NUM_ADC_SAMPLES = NUM_SAMPLES * 2 # Total number of samples to collect
    SAMPLE_BYTES = 2
    EEPROM_ID_SIZE = 50
    
    # set TEST_DATA_REG to one of these constants
    DATA_REAL = 0x00
    DATA_ALL_ZEROS = 0x08
    DATA_ALL_ONES = 0x18
    DATA_CHECKERBOARD = 0x28
    DATA_ALTERNATING = 0x38
    TEST_DATA_REG = DATA_REAL

    num_devices = 0
    descriptions = ['DC890 FastDAACS CNTLR']

    vprint("Devices found:")
    device_info = [None] * 2

    for info in comm.list_controllers(comm.TYPE_DC890):
        if info.get_description() in descriptions:
            device_info[num_devices] = info
            vprint(device_info)
            num_devices = num_devices + 1
            #break
            
    vprint( "No: of devices = " + str(num_devices))
    		
    if device_info is None:
        raise(comm.HardwareError('Could not find a compatible device'))
    
    vprint("Device Info 1: " + str(device_info[0]))
    vprint("Device Info 2: " + str(device_info[1]))

    controller0 = comm.Controller(device_info[0])
    controller1 = comm.Controller(device_info[1])


    controller0.dc890_gpio_set_byte(0xF8)
    controller0.dc890_gpio_spi_set_bits(3, 0, 1)
    controller1.dc890_gpio_set_byte(0xF8)
    controller1.dc890_gpio_spi_set_bits(3, 0, 1)
    
    vprint('Configuring SPI registers')
    if TEST_DATA_REG == DATA_REAL:
        vprint('Set to read real data')
    else:
        vprint('Set to generate test data')
        
    vprint('Configuring SPI registers...')
    controller0.spi_send_byte_at_address(0x00, 0x80)
    controller0.spi_send_byte_at_address(0x01, 0x00)
    # Set address 0x02 to a value of 0x01 to enable DCS (useful if clock is not 50% Duty Cycle)
    controller0.spi_send_byte_at_address(0x02, 0x01) # DCS on
    controller0.spi_send_byte_at_address(0x03, 0x71) # 
    controller0.spi_send_byte_at_address(0x04, TEST_DATA_REG)

    controller1.spi_send_byte_at_address(0x00, 0x80)
    controller1.spi_send_byte_at_address(0x01, 0x00)
    # Set address 0x02 to a value of 0x01 to enable DCS (useful if clock is not 50% Duty Cycle)
    controller1.spi_send_byte_at_address(0x02, 0x01) # DCS on
    controller1.spi_send_byte_at_address(0x03, 0x71) # 
    controller1.spi_send_byte_at_address(0x04, TEST_DATA_REG)


    # Open communication to the demo board
    vprint("Configuring board 0...")
#    with comm.Controller(device_info[0]) as controller:
    if not controller0.fpga_get_is_loaded("DLVDS"):
        vprint('Loading FPGA')
        controller0.fpga_load_file("DLVDS")
    else:
        vprint('FPGA already loaded')

    if verbose:
        print 'Starting data collect'

    controller0.data_set_high_byte_first()
    controller0.data_set_characteristics(True, SAMPLE_BYTES, True)

    vprint("Configuring board 1...")
#    with comm.Controller(device_info[1]) as controller:
    if not controller1.fpga_get_is_loaded("DLVDS"):
        vprint('Loading FPGA')
        controller1.fpga_load_file("DLVDS")
    else:
        vprint('FPGA already loaded')

    if verbose:
        print 'Starting data collect'

    controller1.data_set_high_byte_first()
    controller1.data_set_characteristics(True, SAMPLE_BYTES, True)
    
    if(trigger == True):
        vprint("Starting capture when trigger received...")
        controller0.data_start_collect(NUM_ADC_SAMPLES, comm.TRIGGER_START_POSITIVE_EDGE)
        controller1.data_start_collect(NUM_ADC_SAMPLES, comm.TRIGGER_START_POSITIVE_EDGE)
        for i in range(timeout):
            is_done = controller0.data_is_collect_done()
            if is_done:
                break
            sleep(1.0)
            vprint("Waiting up to " + str(timeout) + " seconds... " + str(i))
        if is_done:
            vprint("Board 0 done!")
        sleep(1.0) # Wait one extra second for board 1 to complete...
        is_done = controller1.data_is_collect_done()
        if is_done:
            vprint("Board 1 done!")
    else:
        vprint("No trigger, capturing immediately...")            
        controller0.data_start_collect(NUM_ADC_SAMPLES, comm.TRIGGER_NONE)
        controller1.data_start_collect(NUM_ADC_SAMPLES, comm.TRIGGER_NONE)
        for i in range(10): # First check board 0
            is_done = controller0.data_is_collect_done()
            if is_done:
                break
            sleep(0.2)
        for i in range(10): # Board 1 should be the same, but just in case...
            is_done = controller1.data_is_collect_done()
            if is_done:
                break


    if not is_done:
        controller0.data_cancel_collect()
        controller1.data_cancel_collect()
        raise comm.HardwareError('Data collect timed out (missing clock?)')
    
    vprint("Reading out data from board 0...")

    controller0.dc890_flush()
    vprint('Reading data from board 0')
    num_bytes, data0 = controller0.data_receive_uint16_values(end=NUM_ADC_SAMPLES)
    vprint('Data read done')

    controller1.dc890_flush()
    vprint('Reading data from board 1')
    num_bytes, data1 = controller1.data_receive_uint16_values(end=NUM_ADC_SAMPLES)
    vprint('Data read done')
            
    controller0.close()
    controller1.close()

    # Data array mapping:
    # data[0] = board 0, ch1
    # data[1] = board 0, ch2
    # data[2] = board 1, ch1
    # data[3] = board 1, ch2
    data = [[0 for i in range(NUM_ADC_SAMPLES/2)] for j in range(4)]
    
    for i in range(NUM_ADC_SAMPLES/2):
        data[0][i] = data0[2*i]& 0xFFFF
        data[1][i] = data0[2*i + 1]& 0xFFFF
        data[2][i] = data1[2*i]& 0xFFFF
        data[3][i] = data1[2*i + 1]& 0xFFFF


    # write the data to a file
    if write_to_file == True:
        vprint('Writing data to file')
        with open('data.txt', 'w') as f:
            for i in range(NUM_ADC_SAMPLES/2):
                f.write(str(data[0][i]) + "," + str(data[1][i]) + ',' +
                        str(data[2][i]) + "," + str(data[3][i])+ '\n')
    
        vprint('File write done.')

    vprint('All finished!')

# Plot data if not running pattern check
    if(plot_data == True):
        from matplotlib import pyplot as plt
        
        plt.figure(1)
        plt.subplot(411)
        plt.plot(data[0])
        plt.title('Board 0, CH1')
        plt.subplot(412)
        plt.plot(data[1])
        plt.title('Board 0, CH2')
        plt.subplot(413)
        plt.plot(data[2])
        plt.title('Board 1, CH1')
        plt.subplot(414)
        plt.plot(data[3])
        plt.title('Board 1, CH2')
        plt.show()

# Plotting frequency domain removed for the time being...
            
    return data

if __name__ == '__main__':

# Data record length, PER CHANNEL

#    NUM_SAMPLES = 1 * 1024
#    NUM_SAMPLES = 2 * 1024
#    NUM_SAMPLES = 4 * 1024
#    NUM_SAMPLES = 8 * 1024
#    NUM_SAMPLES = 16 * 1024
#    NUM_SAMPLES = 32 * 1024
    NUM_SAMPLES = 64 * 1024


    
    # to use this function in your own code you would typically do
    # data = ltc2145_dc1620(NUM_SAMPLES, verbose=False, do_demo=False)
    # Valid number of samples are 1024 to 65536 (powers of two)
    data = ltc2145_dc1620(NUM_SAMPLES, verbose=True, do_demo=True, trigger=True, timeout=15)
#
