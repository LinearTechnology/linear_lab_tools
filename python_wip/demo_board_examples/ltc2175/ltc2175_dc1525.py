# -*- coding: utf-8 -*-
'''
DC1525 / LTC2175 Interface Example

This program demonstrates how to communicate with the LTC2175 demo board through Python.
Examples are provided for reading data captured by the ADC, or test data generated by
the ADC.

Board setup is described in Demo Manual 1532. Follow the procedure in this manual, and
verify operation with the PScope software. Once operation is verified, exit PScope
and run this script.

Tested with Python 2.7, Anaconda distribution available from Continuum Analytics,
http://www.continuum.io/

Demo board documentation:
http://www.linear.com/demo/1525
http://www.linear.com/product/LTC2175#demoboards

LTC2175 product page
http://www.linear.com/product/LTC2175


REVISION HISTORY
$Revision: 4624 $
$Date: 2016-01-26 15:25:57 -0800 (Tue, 26 Jan 2016) $

Copyright (c) 2015, Linear Technology Corp.(LTC)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of Linear Technology Corp.
'''

from time import sleep
# Import communication library
import sys
sys.path.append("../../")
#print sys.path


# Import communication library
import ltc_controller_comm as comm


def ltc2175_dc1525(num_samples, verbose=False, do_demo=False):
    def vprint(s):
        """Print string only if verbose is on"""
        if verbose:
            print s
            
    if do_demo:
        plot_data = True
        write_to_file = True
    else:
        plot_data = False
        write_to_file = False


    NUM_ADC_SAMPLES = num_samples
    TOTAL_ADC_SAMPLES = 4 * NUM_ADC_SAMPLES # Four channel part

    
    # change this to collect real or test pattern data
    use_test_data = False
    # change this to set the output when using the test pattern
    test_data_value = 0x2AAA

    # find demo board with correct ID
    
    expected_eeprom_id = '[0074 DEMO 10 DC1525A-A LTC2175-14 D2175\r\n' + \
                'ADC 14 14 4 0000 00 00 00 00\r\n' + \
                'DBFLG 0003 29 00 00 00\r\n' + \
                'FPGA S2175 T2\r\n' + \
                '80CB]'         
                
    controller_info = None
    print 'Looking for a DC1371 with a DC1525A-X demoboard'
    for info in comm.list_controllers(comm.TYPE_DC1371):
        with comm.Controller(info) as controller:
            found_eeprom_id = controller.eeprom_read_string(len(expected_eeprom_id))
            if 'DC1525' in found_eeprom_id:
                if verbose:
                    print 'Found a DC1525A-x demoboard'
                controller_info = info
                break
    if controller_info is None:
        raise(comm.HardwareError('Could not find a compatible device'))
        
    # Open communication to the demo board
    with comm.Controller(controller_info) as controller:
        vprint('Configuring SPI registers')
        if use_test_data:
            vprint( 'Set to generate test data')
            reg3 = 0x80 | ((test_data_value >> 8) & 0x3F)
            reg4 = test_data_value & 0xFF
        else:
            vprint('Set to read real data')
            reg3 = 0x00
            reg4 = 0x00
    
        controller.spi_send_byte_at_address(0x00, 0x80)
        controller.spi_send_byte_at_address(0x01, 0x00)
        controller.spi_send_byte_at_address(0x02, 0x00)
        controller.spi_send_byte_at_address(0x03, reg3)
        controller.spi_send_byte_at_address(0x04, reg4)
    
        if not controller.fpga_get_is_loaded("S2175"):
            vprint('Loading FPGA')
            controller.fpga_load_file("S2175")
        vprint('FPGA already loaded')
    
        # demo-board specific information needed by the DC1371
        controller.dc1371_set_demo_config(0x29000000)
        vprint('Starting data collect')
        controller.data_start_collect(TOTAL_ADC_SAMPLES, comm.TRIGGER_NONE)
    
        for i in range(10):
            is_done = controller.data_is_collect_done()
            if is_done:
                break
            sleep(0.2)
    
        if not is_done:
            raise comm.HardwareError('Data collect timed out (missing clock?)')
    
        vprint('Data collect done.')
    
        vprint('Reading data')
        num_bytes, data = controller.data_receive_uint16_values(end=TOTAL_ADC_SAMPLES)
        vprint('Data read done')
    
    # Split data into four channels
        data_ch1 = [data[i] & 0x3FFF for i in range(0, TOTAL_ADC_SAMPLES, 4)]
        data_ch2 = [data[i] & 0x3FFF for i in range(1, TOTAL_ADC_SAMPLES, 4)]
        data_ch3 = [data[i] & 0x3FFF for i in range(2, TOTAL_ADC_SAMPLES, 4)]
        data_ch4 = [data[i] & 0x3FFF for i in range(3, TOTAL_ADC_SAMPLES, 4)]
    
        # write the data to a file
        if write_to_file:
            vprint('Writing data to file')
            with open('data.txt', 'w') as f:
                for i in range(NUM_ADC_SAMPLES):
                    f.write(str(data_ch1[i]) + "," + str(data_ch2[i]) + ","
                            + str(data_ch3[i]) + "," + str(data_ch4[i]) + '\n')
        
            vprint('File write done.')
        vprint('All finished!')

    # Plot data if requested
        if plot_data:
            from matplotlib import pyplot as plt
            import numpy as np
            
            plt.figure(1)
            plt.subplot(411)
            plt.plot(data_ch1)
            plt.title('CH1 Time Domain')
            plt.subplot(412)
            plt.title('CH2 Time Domain')
            plt.plot(data_ch2)
            plt.subplot(413)
            plt.plot(data_ch3)
            plt.title('CH3 Time Domain')
            plt.subplot(414)
            plt.title('CH4 Time Domain')
            plt.plot(data_ch4)
            plt.show()
    
            adc_amplitude = 16384.0 / 2.0
            
            windowscale = (NUM_ADC_SAMPLES) / sum(np.blackman(NUM_ADC_SAMPLES))
            vprint("Window scaling factor: " + str(windowscale))
            
            data_ch1_nodc = data_ch1 - np.average(data_ch1)
            windowed_data_ch1 = data_ch1_nodc * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
            freq_domain_ch1 = np.fft.fft(windowed_data_ch1)/(NUM_ADC_SAMPLES) # FFT
            freq_domain_magnitude_ch1 = np.abs(freq_domain_ch1) # Extract magnitude
            freq_domain_magnitude_db_ch1 = 20 * np.log10(freq_domain_magnitude_ch1/adc_amplitude)
            
            data_ch2_nodc = data_ch2 - np.average(data_ch2)
            windowed_data_ch2 = data_ch2_nodc * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
            freq_domain_ch2 = np.fft.fft(windowed_data_ch2)/(NUM_ADC_SAMPLES) # FFT
            freq_domain_magnitude_ch2 = np.abs(freq_domain_ch2) # Extract magnitude
            freq_domain_magnitude_db_ch2 = 20 * np.log10(freq_domain_magnitude_ch2/adc_amplitude)            

            data_ch3_nodc = data_ch3 - np.average(data_ch3)
            windowed_data_ch3 = data_ch3_nodc * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
            freq_domain_ch3 = np.fft.fft(windowed_data_ch3)/(NUM_ADC_SAMPLES) # FFT
            freq_domain_magnitude_ch3 = np.abs(freq_domain_ch3) # Extract magnitude
            freq_domain_magnitude_db_ch3 = 20 * np.log10(freq_domain_magnitude_ch3/adc_amplitude)    

            data_ch4_nodc = data_ch4 - np.average(data_ch4)
            windowed_data_ch4 = data_ch4_nodc * np.blackman(NUM_ADC_SAMPLES) * windowscale # Apply Blackman window
            freq_domain_ch4 = np.fft.fft(windowed_data_ch4)/(NUM_ADC_SAMPLES) # FFT
            freq_domain_magnitude_ch4 = np.abs(freq_domain_ch4) # Extract magnitude
            freq_domain_magnitude_db_ch4 = 20 * np.log10(freq_domain_magnitude_ch4/adc_amplitude)
            
            plt.figure(2)
            plt.subplot(411)
            plt.title('CH1 FFT')
            plt.plot(freq_domain_magnitude_db_ch1)
            plt.subplot(412)
            plt.title('CH2 FFT')
            plt.plot(freq_domain_magnitude_db_ch2)
            plt.subplot(413)
            plt.title('CH3 FFT')
            plt.plot(freq_domain_magnitude_db_ch3)
            plt.subplot(414)
            plt.title('CH4 FFT')
            plt.plot(freq_domain_magnitude_db_ch4)
            plt.show()

        return data_ch1, data_ch2, data_ch3, data_ch4


if __name__ == '__main__':

# Data record length

#    NUM_SAMPLES = 1 * 1024
#    NUM_SAMPLES = 2 * 1024
#    NUM_SAMPLES = 4 * 1024
#    NUM_SAMPLES = 8 * 1024
    NUM_SAMPLES = 16 * 1024
#    NUM_SAMPLES = 32 * 1024
#    NUM_SAMPLES = 64 * 1024
#    NUM_SAMPLES = 128 * 1024
#▐    NUM_SAMPLES = 256 * 1024

    
    # to use this function in your own code you would typically do
    # data = ch1, ch2, ch3, ch4 = ltc2175_dc1525(NUM_SAMPLES, verbose=False, do_demo=False)
    # Valid number of samples are 1024 to 65536 (powers of two)
    ch1, ch2, ch3, ch4 = ltc2175_dc1525(NUM_SAMPLES, verbose=True, do_demo=True)
